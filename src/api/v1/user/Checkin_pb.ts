// @generated by protoc-gen-es v1.4.2 with parameter "target=ts,import_extension=.ts"
// @generated from file v1/user/Checkin.proto (package server.user, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Coupon } from "../shared/Coupon_pb.ts";

/**
 * @generated from message server.user.CheckinRequest
 */
export class CheckinRequest extends Message<CheckinRequest> {
  /**
   * @generated from field: string qrHash = 1;
   */
  qrHash = "";

  constructor(data?: PartialMessage<CheckinRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.user.CheckinRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "qrHash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckinRequest {
    return new CheckinRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckinRequest {
    return new CheckinRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckinRequest {
    return new CheckinRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CheckinRequest | PlainMessage<CheckinRequest> | undefined, b: CheckinRequest | PlainMessage<CheckinRequest> | undefined): boolean {
    return proto3.util.equals(CheckinRequest, a, b);
  }
}

/**
 * @generated from message server.user.CheckinStamp
 */
export class CheckinStamp extends Message<CheckinStamp> {
  /**
   * @generated from field: string ID = 1;
   */
  ID = "";

  /**
   * @generated from field: string StoreID = 2;
   */
  StoreID = "";

  /**
   * @generated from field: string StoreName = 3;
   */
  StoreName = "";

  /**
   * @generated from field: string StoreStampImage = 4;
   */
  StoreStampImage = "";

  /**
   * @generated from field: google.protobuf.Timestamp CheckInAt = 5;
   */
  CheckInAt?: Timestamp;

  constructor(data?: PartialMessage<CheckinStamp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.user.CheckinStamp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "StoreID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "StoreName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "StoreStampImage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "CheckInAt", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckinStamp {
    return new CheckinStamp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckinStamp {
    return new CheckinStamp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckinStamp {
    return new CheckinStamp().fromJsonString(jsonString, options);
  }

  static equals(a: CheckinStamp | PlainMessage<CheckinStamp> | undefined, b: CheckinStamp | PlainMessage<CheckinStamp> | undefined): boolean {
    return proto3.util.equals(CheckinStamp, a, b);
  }
}

/**
 * @generated from message server.user.StampCardResponse
 */
export class StampCardResponse extends Message<StampCardResponse> {
  /**
   * @generated from field: repeated server.user.CheckinStamp stamps = 1;
   */
  stamps: CheckinStamp[] = [];

  constructor(data?: PartialMessage<StampCardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.user.StampCardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stamps", kind: "message", T: CheckinStamp, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StampCardResponse {
    return new StampCardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StampCardResponse {
    return new StampCardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StampCardResponse {
    return new StampCardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StampCardResponse | PlainMessage<StampCardResponse> | undefined, b: StampCardResponse | PlainMessage<StampCardResponse> | undefined): boolean {
    return proto3.util.equals(StampCardResponse, a, b);
  }
}

/**
 * @generated from message server.user.CheckinResponse
 */
export class CheckinResponse extends Message<CheckinResponse> {
  /**
   * @generated from field: optional server.shared.Coupon MayCoupon = 1;
   */
  MayCoupon?: Coupon;

  constructor(data?: PartialMessage<CheckinResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.user.CheckinResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "MayCoupon", kind: "message", T: Coupon, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckinResponse {
    return new CheckinResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckinResponse {
    return new CheckinResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckinResponse {
    return new CheckinResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CheckinResponse | PlainMessage<CheckinResponse> | undefined, b: CheckinResponse | PlainMessage<CheckinResponse> | undefined): boolean {
    return proto3.util.equals(CheckinResponse, a, b);
  }
}

