// @generated by protoc-gen-es v1.10.1 with parameter "target=ts,import_extension=.ts"
// @generated from file v1/user/AnonAuth.proto (package server.user, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message server.user.UserAuthRequest
 */
export class UserAuthRequest extends Message<UserAuthRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<UserAuthRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.user.UserAuthRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserAuthRequest {
    return new UserAuthRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserAuthRequest {
    return new UserAuthRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserAuthRequest {
    return new UserAuthRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserAuthRequest | PlainMessage<UserAuthRequest> | undefined, b: UserAuthRequest | PlainMessage<UserAuthRequest> | undefined): boolean {
    return proto3.util.equals(UserAuthRequest, a, b);
  }
}

/**
 * @generated from message server.user.SignUpRequest
 */
export class SignUpRequest extends Message<SignUpRequest> {
  /**
   * @generated from field: string accessToken = 1;
   */
  accessToken = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<SignUpRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.user.SignUpRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "accessToken", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignUpRequest {
    return new SignUpRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignUpRequest {
    return new SignUpRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignUpRequest {
    return new SignUpRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SignUpRequest | PlainMessage<SignUpRequest> | undefined, b: SignUpRequest | PlainMessage<SignUpRequest> | undefined): boolean {
    return proto3.util.equals(SignUpRequest, a, b);
  }
}

/**
 * @generated from message server.user.UserMailRequest
 */
export class UserMailRequest extends Message<UserMailRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  constructor(data?: PartialMessage<UserMailRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.user.UserMailRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserMailRequest {
    return new UserMailRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserMailRequest {
    return new UserMailRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserMailRequest {
    return new UserMailRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserMailRequest | PlainMessage<UserMailRequest> | undefined, b: UserMailRequest | PlainMessage<UserMailRequest> | undefined): boolean {
    return proto3.util.equals(UserMailRequest, a, b);
  }
}

/**
 * @generated from message server.user.AnonTokenResponse
 */
export class AnonTokenResponse extends Message<AnonTokenResponse> {
  /**
   * @generated from field: string accessToken = 1;
   */
  accessToken = "";

  /**
   * @generated from field: string refreshToken = 2;
   */
  refreshToken = "";

  /**
   * @generated from field: int64 expiresIn = 3;
   */
  expiresIn = protoInt64.zero;

  constructor(data?: PartialMessage<AnonTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.user.AnonTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "accessToken", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "refreshToken", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "expiresIn", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnonTokenResponse {
    return new AnonTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnonTokenResponse {
    return new AnonTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnonTokenResponse {
    return new AnonTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AnonTokenResponse | PlainMessage<AnonTokenResponse> | undefined, b: AnonTokenResponse | PlainMessage<AnonTokenResponse> | undefined): boolean {
    return proto3.util.equals(AnonTokenResponse, a, b);
  }
}

/**
 * @generated from message server.user.SetNewPasswordRequest
 */
export class SetNewPasswordRequest extends Message<SetNewPasswordRequest> {
  /**
   * @generated from field: string accessToken = 1;
   */
  accessToken = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<SetNewPasswordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.user.SetNewPasswordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "accessToken", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetNewPasswordRequest {
    return new SetNewPasswordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetNewPasswordRequest {
    return new SetNewPasswordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetNewPasswordRequest {
    return new SetNewPasswordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetNewPasswordRequest | PlainMessage<SetNewPasswordRequest> | undefined, b: SetNewPasswordRequest | PlainMessage<SetNewPasswordRequest> | undefined): boolean {
    return proto3.util.equals(SetNewPasswordRequest, a, b);
  }
}

/**
 * @generated from message server.user.TokenRequest
 */
export class TokenRequest extends Message<TokenRequest> {
  /**
   * @generated from field: string accessToken = 1;
   */
  accessToken = "";

  constructor(data?: PartialMessage<TokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.user.TokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "accessToken", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TokenRequest {
    return new TokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TokenRequest {
    return new TokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TokenRequest {
    return new TokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TokenRequest | PlainMessage<TokenRequest> | undefined, b: TokenRequest | PlainMessage<TokenRequest> | undefined): boolean {
    return proto3.util.equals(TokenRequest, a, b);
  }
}

/**
 * @generated from message server.user.UserMailResponse
 */
export class UserMailResponse extends Message<UserMailResponse> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  constructor(data?: PartialMessage<UserMailResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.user.UserMailResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserMailResponse {
    return new UserMailResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserMailResponse {
    return new UserMailResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserMailResponse {
    return new UserMailResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserMailResponse | PlainMessage<UserMailResponse> | undefined, b: UserMailResponse | PlainMessage<UserMailResponse> | undefined): boolean {
    return proto3.util.equals(UserMailResponse, a, b);
  }
}

/**
 * @generated from message server.user.ResendInviteRequest
 */
export class ResendInviteRequest extends Message<ResendInviteRequest> {
  /**
   * @generated from field: string Mail = 1;
   */
  Mail = "";

  constructor(data?: PartialMessage<ResendInviteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.user.ResendInviteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Mail", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResendInviteRequest {
    return new ResendInviteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResendInviteRequest {
    return new ResendInviteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResendInviteRequest {
    return new ResendInviteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResendInviteRequest | PlainMessage<ResendInviteRequest> | undefined, b: ResendInviteRequest | PlainMessage<ResendInviteRequest> | undefined): boolean {
    return proto3.util.equals(ResendInviteRequest, a, b);
  }
}

/**
 * @generated from message server.user.IsUnderRegisterResponse
 */
export class IsUnderRegisterResponse extends Message<IsUnderRegisterResponse> {
  /**
   * @generated from field: bool isUnderRegister = 1;
   */
  isUnderRegister = false;

  constructor(data?: PartialMessage<IsUnderRegisterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.user.IsUnderRegisterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "isUnderRegister", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IsUnderRegisterResponse {
    return new IsUnderRegisterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IsUnderRegisterResponse {
    return new IsUnderRegisterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IsUnderRegisterResponse {
    return new IsUnderRegisterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IsUnderRegisterResponse | PlainMessage<IsUnderRegisterResponse> | undefined, b: IsUnderRegisterResponse | PlainMessage<IsUnderRegisterResponse> | undefined): boolean {
    return proto3.util.equals(IsUnderRegisterResponse, a, b);
  }
}

