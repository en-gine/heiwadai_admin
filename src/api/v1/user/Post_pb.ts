// @generated by protoc-gen-es v1.6.0 with parameter "target=ts,import_extension=.ts"
// @generated from file v1/user/Post.proto (package server.user, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message server.user.PostRequest
 */
export class PostRequest extends Message<PostRequest> {
  /**
   * @generated from field: uint32 ID = 1;
   */
  ID = 0;

  constructor(data?: PartialMessage<PostRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.user.PostRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostRequest {
    return new PostRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostRequest {
    return new PostRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostRequest {
    return new PostRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostRequest | PlainMessage<PostRequest> | undefined, b: PostRequest | PlainMessage<PostRequest> | undefined): boolean {
    return proto3.util.equals(PostRequest, a, b);
  }
}

/**
 * @generated from message server.user.PostsResponse
 */
export class PostsResponse extends Message<PostsResponse> {
  /**
   * @generated from field: repeated server.user.PostResponse posts = 1;
   */
  posts: PostResponse[] = [];

  constructor(data?: PartialMessage<PostsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.user.PostsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "posts", kind: "message", T: PostResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostsResponse {
    return new PostsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostsResponse {
    return new PostsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostsResponse {
    return new PostsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PostsResponse | PlainMessage<PostsResponse> | undefined, b: PostsResponse | PlainMessage<PostsResponse> | undefined): boolean {
    return proto3.util.equals(PostsResponse, a, b);
  }
}

/**
 * @generated from message server.user.PostResponse
 */
export class PostResponse extends Message<PostResponse> {
  /**
   * @generated from field: uint32 ID = 1;
   */
  ID = 0;

  /**
   * @generated from field: string Title = 2;
   */
  Title = "";

  /**
   * @generated from field: string Content = 3;
   */
  Content = "";

  /**
   * @generated from field: string Author = 4;
   */
  Author = "";

  /**
   * @generated from field: google.protobuf.Timestamp PostDate = 5;
   */
  PostDate?: Timestamp;

  constructor(data?: PartialMessage<PostResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.user.PostResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "Title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "Content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "Author", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "PostDate", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostResponse {
    return new PostResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostResponse {
    return new PostResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostResponse {
    return new PostResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PostResponse | PlainMessage<PostResponse> | undefined, b: PostResponse | PlainMessage<PostResponse> | undefined): boolean {
    return proto3.util.equals(PostResponse, a, b);
  }
}

