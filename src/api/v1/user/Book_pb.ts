// @generated by protoc-gen-es v1.6.0 with parameter "target=ts,import_extension=.ts"
// @generated from file v1/user/Book.proto (package server.user, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Prefecture } from "../shared/Prefecture_pb.ts";

/**
 * @generated from enum server.user.MealType
 */
export enum MealType {
  /**
   * @generated from enum value: Morning = 0;
   */
  Morning = 0,

  /**
   * @generated from enum value: Dinner = 1;
   */
  Dinner = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(MealType)
proto3.util.setEnumType(MealType, "server.user.MealType", [
  { no: 0, name: "Morning" },
  { no: 1, name: "Dinner" },
]);

/**
 * @generated from enum server.user.RoomType
 */
export enum RoomType {
  /**
   * @generated from enum value: RoomTypeSingle = 0;
   */
  RoomTypeSingle = 0,

  /**
   * @generated from enum value: RoomTypeSemiDouble = 1;
   */
  RoomTypeSemiDouble = 1,

  /**
   * @generated from enum value: RoomTypeDouble = 2;
   */
  RoomTypeDouble = 2,

  /**
   * @generated from enum value: RoomTypeTwin = 3;
   */
  RoomTypeTwin = 3,

  /**
   * @generated from enum value: RoomTypeFourth = 4;
   */
  RoomTypeFourth = 4,

  /**
   * @generated from enum value: RoomTypeUnknown = 5;
   */
  RoomTypeUnknown = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(RoomType)
proto3.util.setEnumType(RoomType, "server.user.RoomType", [
  { no: 0, name: "RoomTypeSingle" },
  { no: 1, name: "RoomTypeSemiDouble" },
  { no: 2, name: "RoomTypeDouble" },
  { no: 3, name: "RoomTypeTwin" },
  { no: 4, name: "RoomTypeFourth" },
  { no: 5, name: "RoomTypeUnknown" },
]);

/**
 * @generated from enum server.user.SmokeType
 */
export enum SmokeType {
  /**
   * @generated from enum value: SmokeTypeNonSmoking = 0;
   */
  SmokeTypeNonSmoking = 0,

  /**
   * @generated from enum value: SmokeTypeSmoking = 1;
   */
  SmokeTypeSmoking = 1,

  /**
   * @generated from enum value: SmokeTypeUnknown = 2;
   */
  SmokeTypeUnknown = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(SmokeType)
proto3.util.setEnumType(SmokeType, "server.user.SmokeType", [
  { no: 0, name: "SmokeTypeNonSmoking" },
  { no: 1, name: "SmokeTypeSmoking" },
  { no: 2, name: "SmokeTypeUnknown" },
]);

/**
 * @generated from message server.user.BookResponse
 */
export class BookResponse extends Message<BookResponse> {
  /**
   * @generated from field: string ID = 1;
   */
  ID = "";

  /**
   * @generated from field: google.protobuf.Timestamp StayFrom = 2;
   */
  StayFrom?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp StayTo = 3;
   */
  StayTo?: Timestamp;

  /**
   * @generated from field: uint32 Adult = 4;
   */
  Adult = 0;

  /**
   * @generated from field: uint32 Child = 5;
   */
  Child = 0;

  /**
   * @generated from field: uint32 RoomCount = 6;
   */
  RoomCount = 0;

  /**
   * CheckInTime message needs to be defined
   *
   * @generated from field: string CheckInTime = 7;
   */
  CheckInTime = "";

  /**
   * @generated from field: uint32 TotalCost = 8;
   */
  TotalCost = 0;

  /**
   * @generated from field: server.user.GuestData GuestData = 9;
   */
  GuestData?: GuestData;

  /**
   * @generated from field: server.user.DisplayPlan Plan = 10;
   */
  Plan?: DisplayPlan;

  /**
   * @generated from field: string Note = 12;
   */
  Note = "";

  constructor(data?: PartialMessage<BookResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.user.BookResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "StayFrom", kind: "message", T: Timestamp },
    { no: 3, name: "StayTo", kind: "message", T: Timestamp },
    { no: 4, name: "Adult", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "Child", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "RoomCount", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: "CheckInTime", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "TotalCost", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 9, name: "GuestData", kind: "message", T: GuestData },
    { no: 10, name: "Plan", kind: "message", T: DisplayPlan },
    { no: 12, name: "Note", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BookResponse {
    return new BookResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BookResponse {
    return new BookResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BookResponse {
    return new BookResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BookResponse | PlainMessage<BookResponse> | undefined, b: BookResponse | PlainMessage<BookResponse> | undefined): boolean {
    return proto3.util.equals(BookResponse, a, b);
  }
}

/**
 * @generated from message server.user.GuestData
 */
export class GuestData extends Message<GuestData> {
  /**
   * @generated from field: string FirstName = 1;
   */
  FirstName = "";

  /**
   * @generated from field: string LastName = 2;
   */
  LastName = "";

  /**
   * @generated from field: string FirstNameKana = 3;
   */
  FirstNameKana = "";

  /**
   * @generated from field: string LastNameKana = 4;
   */
  LastNameKana = "";

  /**
   * Optional field
   *
   * @generated from field: optional string CompanyName = 5;
   */
  CompanyName?: string;

  /**
   * Optional field
   *
   * @generated from field: optional string ZipCode = 6;
   */
  ZipCode?: string;

  /**
   * @generated from field: optional server.shared.Prefecture Prefecture = 7;
   */
  Prefecture?: Prefecture;

  /**
   * Optional field
   *
   * @generated from field: optional string City = 8;
   */
  City?: string;

  /**
   * Optional field
   *
   * @generated from field: optional string Address = 9;
   */
  Address?: string;

  /**
   * Optional field
   *
   * @generated from field: optional string Tel = 10;
   */
  Tel?: string;

  /**
   * @generated from field: string Mail = 11;
   */
  Mail = "";

  constructor(data?: PartialMessage<GuestData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.user.GuestData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "FirstName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "LastName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "FirstNameKana", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "LastNameKana", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "CompanyName", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "ZipCode", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "Prefecture", kind: "enum", T: proto3.getEnumType(Prefecture), opt: true },
    { no: 8, name: "City", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "Address", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "Tel", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 11, name: "Mail", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GuestData {
    return new GuestData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GuestData {
    return new GuestData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GuestData {
    return new GuestData().fromJsonString(jsonString, options);
  }

  static equals(a: GuestData | PlainMessage<GuestData> | undefined, b: GuestData | PlainMessage<GuestData> | undefined): boolean {
    return proto3.util.equals(GuestData, a, b);
  }
}

/**
 * @generated from message server.user.RequestPlan
 */
export class RequestPlan extends Message<RequestPlan> {
  /**
   * @generated from field: string ID = 1;
   */
  ID = "";

  /**
   * @generated from field: string Title = 2;
   */
  Title = "";

  /**
   * @generated from field: uint32 Price = 3;
   */
  Price = 0;

  /**
   * @generated from field: string ImageURL = 4;
   */
  ImageURL = "";

  /**
   * @generated from field: server.user.RoomType RoomType = 5;
   */
  RoomType = RoomType.RoomTypeSingle;

  /**
   * @generated from field: repeated server.user.MealType MealTypes = 6;
   */
  MealTypes: MealType[] = [];

  /**
   * @generated from field: server.user.SmokeType SmokeType = 7;
   */
  SmokeType = SmokeType.SmokeTypeNonSmoking;

  /**
   * @generated from field: string OverView = 8;
   */
  OverView = "";

  /**
   * @generated from field: string StoreID = 9;
   */
  StoreID = "";

  constructor(data?: PartialMessage<RequestPlan>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.user.RequestPlan";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "Price", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "ImageURL", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "RoomType", kind: "enum", T: proto3.getEnumType(RoomType) },
    { no: 6, name: "MealTypes", kind: "enum", T: proto3.getEnumType(MealType), repeated: true },
    { no: 7, name: "SmokeType", kind: "enum", T: proto3.getEnumType(SmokeType) },
    { no: 8, name: "OverView", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "StoreID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestPlan {
    return new RequestPlan().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestPlan {
    return new RequestPlan().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestPlan {
    return new RequestPlan().fromJsonString(jsonString, options);
  }

  static equals(a: RequestPlan | PlainMessage<RequestPlan> | undefined, b: RequestPlan | PlainMessage<RequestPlan> | undefined): boolean {
    return proto3.util.equals(RequestPlan, a, b);
  }
}

/**
 * @generated from message server.user.DisplayPlan
 */
export class DisplayPlan extends Message<DisplayPlan> {
  /**
   * @generated from field: string ID = 1;
   */
  ID = "";

  /**
   * @generated from field: string Title = 2;
   */
  Title = "";

  /**
   * @generated from field: uint32 Price = 3;
   */
  Price = 0;

  /**
   * @generated from field: string ImageURL = 4;
   */
  ImageURL = "";

  /**
   * @generated from field: string RoomTypeName = 5;
   */
  RoomTypeName = "";

  /**
   * @generated from field: string MealTypeName = 6;
   */
  MealTypeName = "";

  /**
   * @generated from field: string SmokeTypeName = 7;
   */
  SmokeTypeName = "";

  /**
   * @generated from field: string OverView = 8;
   */
  OverView = "";

  /**
   * @generated from field: string StoreID = 9;
   */
  StoreID = "";

  /**
   * @generated from field: string StoreName = 10;
   */
  StoreName = "";

  /**
   * @generated from field: optional string StoreBranchName = 11;
   */
  StoreBranchName?: string;

  constructor(data?: PartialMessage<DisplayPlan>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.user.DisplayPlan";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "Price", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "ImageURL", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "RoomTypeName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "MealTypeName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "SmokeTypeName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "OverView", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "StoreID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "StoreName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "StoreBranchName", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisplayPlan {
    return new DisplayPlan().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisplayPlan {
    return new DisplayPlan().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisplayPlan {
    return new DisplayPlan().fromJsonString(jsonString, options);
  }

  static equals(a: DisplayPlan | PlainMessage<DisplayPlan> | undefined, b: DisplayPlan | PlainMessage<DisplayPlan> | undefined): boolean {
    return proto3.util.equals(DisplayPlan, a, b);
  }
}

/**
 * @generated from message server.user.ReserveRequest
 */
export class ReserveRequest extends Message<ReserveRequest> {
  /**
   * @generated from field: google.protobuf.Timestamp StayFrom = 1;
   */
  StayFrom?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp StayTo = 2;
   */
  StayTo?: Timestamp;

  /**
   * @generated from field: uint32 Adult = 3;
   */
  Adult = 0;

  /**
   * @generated from field: uint32 Child = 4;
   */
  Child = 0;

  /**
   * @generated from field: uint32 RoomCount = 5;
   */
  RoomCount = 0;

  /**
   * @generated from field: string CheckInTime = 6;
   */
  CheckInTime = "";

  /**
   * @generated from field: uint32 TotalCost = 7;
   */
  TotalCost = 0;

  /**
   * @generated from field: server.user.GuestData GuestData = 8;
   */
  GuestData?: GuestData;

  /**
   * @generated from field: server.user.RequestPlan RequestPlan = 9;
   */
  RequestPlan?: RequestPlan;

  /**
   * @generated from field: optional string Note = 11;
   */
  Note?: string;

  constructor(data?: PartialMessage<ReserveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.user.ReserveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "StayFrom", kind: "message", T: Timestamp },
    { no: 2, name: "StayTo", kind: "message", T: Timestamp },
    { no: 3, name: "Adult", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "Child", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "RoomCount", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "CheckInTime", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "TotalCost", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 8, name: "GuestData", kind: "message", T: GuestData },
    { no: 9, name: "RequestPlan", kind: "message", T: RequestPlan },
    { no: 11, name: "Note", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReserveRequest {
    return new ReserveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReserveRequest {
    return new ReserveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReserveRequest {
    return new ReserveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReserveRequest | PlainMessage<ReserveRequest> | undefined, b: ReserveRequest | PlainMessage<ReserveRequest> | undefined): boolean {
    return proto3.util.equals(ReserveRequest, a, b);
  }
}

/**
 * @generated from message server.user.BookIDRequest
 */
export class BookIDRequest extends Message<BookIDRequest> {
  /**
   * @generated from field: string ID = 1;
   */
  ID = "";

  constructor(data?: PartialMessage<BookIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.user.BookIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BookIDRequest {
    return new BookIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BookIDRequest {
    return new BookIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BookIDRequest {
    return new BookIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BookIDRequest | PlainMessage<BookIDRequest> | undefined, b: BookIDRequest | PlainMessage<BookIDRequest> | undefined): boolean {
    return proto3.util.equals(BookIDRequest, a, b);
  }
}

/**
 * @generated from message server.user.BooksResponse
 */
export class BooksResponse extends Message<BooksResponse> {
  /**
   * @generated from field: repeated server.user.BookResponse Books = 1;
   */
  Books: BookResponse[] = [];

  constructor(data?: PartialMessage<BooksResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.user.BooksResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Books", kind: "message", T: BookResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BooksResponse {
    return new BooksResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BooksResponse {
    return new BooksResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BooksResponse {
    return new BooksResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BooksResponse | PlainMessage<BooksResponse> | undefined, b: BooksResponse | PlainMessage<BooksResponse> | undefined): boolean {
    return proto3.util.equals(BooksResponse, a, b);
  }
}

/**
 * @generated from message server.user.PlansResponse
 */
export class PlansResponse extends Message<PlansResponse> {
  /**
   * @generated from field: repeated server.user.DisplayPlan Plans = 1;
   */
  Plans: DisplayPlan[] = [];

  constructor(data?: PartialMessage<PlansResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.user.PlansResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Plans", kind: "message", T: DisplayPlan, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlansResponse {
    return new PlansResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlansResponse {
    return new PlansResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlansResponse {
    return new PlansResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PlansResponse | PlainMessage<PlansResponse> | undefined, b: PlansResponse | PlainMessage<PlansResponse> | undefined): boolean {
    return proto3.util.equals(PlansResponse, a, b);
  }
}

/**
 * @generated from message server.user.PlanSearchRequest
 */
export class PlanSearchRequest extends Message<PlanSearchRequest> {
  /**
   * @generated from field: repeated string StoreIDs = 1;
   */
  StoreIDs: string[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp StayFrom = 2;
   */
  StayFrom?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp StayTo = 3;
   */
  StayTo?: Timestamp;

  /**
   * @generated from field: uint32 Adult = 4;
   */
  Adult = 0;

  /**
   * @generated from field: uint32 Child = 5;
   */
  Child = 0;

  /**
   * @generated from field: uint32 RoomCount = 6;
   */
  RoomCount = 0;

  /**
   * @generated from field: string CheckInTime = 7;
   */
  CheckInTime = "";

  /**
   * @generated from field: repeated server.user.SmokeType SmokeTypes = 8;
   */
  SmokeTypes: SmokeType[] = [];

  /**
   * @generated from field: repeated server.user.MealType MealTypes = 9;
   */
  MealTypes: MealType[] = [];

  /**
   * @generated from field: repeated server.user.RoomType RoomTypes = 10;
   */
  RoomTypes: RoomType[] = [];

  constructor(data?: PartialMessage<PlanSearchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.user.PlanSearchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "StoreIDs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "StayFrom", kind: "message", T: Timestamp },
    { no: 3, name: "StayTo", kind: "message", T: Timestamp },
    { no: 4, name: "Adult", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "Child", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "RoomCount", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: "CheckInTime", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "SmokeTypes", kind: "enum", T: proto3.getEnumType(SmokeType), repeated: true },
    { no: 9, name: "MealTypes", kind: "enum", T: proto3.getEnumType(MealType), repeated: true },
    { no: 10, name: "RoomTypes", kind: "enum", T: proto3.getEnumType(RoomType), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlanSearchRequest {
    return new PlanSearchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlanSearchRequest {
    return new PlanSearchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlanSearchRequest {
    return new PlanSearchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PlanSearchRequest | PlainMessage<PlanSearchRequest> | undefined, b: PlanSearchRequest | PlainMessage<PlanSearchRequest> | undefined): boolean {
    return proto3.util.equals(PlanSearchRequest, a, b);
  }
}

