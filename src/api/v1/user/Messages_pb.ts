// @generated by protoc-gen-es v1.10.1 with parameter "target=ts,import_extension=.ts"
// @generated from file v1/user/Messages.proto (package server.user, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message server.user.MessageRequest
 */
export class MessageRequest extends Message<MessageRequest> {
  /**
   * @generated from field: string ID = 1;
   */
  ID = "";

  constructor(data?: PartialMessage<MessageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.user.MessageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageRequest {
    return new MessageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageRequest {
    return new MessageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageRequest {
    return new MessageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MessageRequest | PlainMessage<MessageRequest> | undefined, b: MessageRequest | PlainMessage<MessageRequest> | undefined): boolean {
    return proto3.util.equals(MessageRequest, a, b);
  }
}

/**
 * @generated from message server.user.MessagesResponse
 */
export class MessagesResponse extends Message<MessagesResponse> {
  /**
   * @generated from field: repeated server.user.MessageResponse messages = 1;
   */
  messages: MessageResponse[] = [];

  constructor(data?: PartialMessage<MessagesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.user.MessagesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "messages", kind: "message", T: MessageResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesResponse {
    return new MessagesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesResponse {
    return new MessagesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesResponse {
    return new MessagesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesResponse | PlainMessage<MessagesResponse> | undefined, b: MessagesResponse | PlainMessage<MessagesResponse> | undefined): boolean {
    return proto3.util.equals(MessagesResponse, a, b);
  }
}

/**
 * @generated from message server.user.MessageResponse
 */
export class MessageResponse extends Message<MessageResponse> {
  /**
   * @generated from field: string ID = 1;
   */
  ID = "";

  /**
   * @generated from field: string Title = 2;
   */
  Title = "";

  /**
   * @generated from field: string Content = 3;
   */
  Content = "";

  /**
   * @generated from field: string AuthorID = 4;
   */
  AuthorID = "";

  /**
   * @generated from field: google.protobuf.Timestamp DisplayDate = 5;
   */
  DisplayDate?: Timestamp;

  constructor(data?: PartialMessage<MessageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.user.MessageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "Content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "AuthorID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "DisplayDate", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageResponse {
    return new MessageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageResponse {
    return new MessageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageResponse {
    return new MessageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MessageResponse | PlainMessage<MessageResponse> | undefined, b: MessageResponse | PlainMessage<MessageResponse> | undefined): boolean {
    return proto3.util.equals(MessageResponse, a, b);
  }
}

