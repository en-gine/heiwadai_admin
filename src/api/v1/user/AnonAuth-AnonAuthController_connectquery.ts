// @generated by protoc-gen-connect-query v1.1.2 with parameter "target=ts,import_extension=.ts"
// @generated from file v1/user/AnonAuth.proto (package server.user, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Empty, MethodKind } from "@bufbuild/protobuf";
import { UserRegisterRequest } from "./UserData_pb.ts";
import { AnonTokenResponse, IsUnderRegisterResponse, SetNewPasswordRequest, SignUpRequest, TokenRequest, UserAuthRequest, UserMailRequest, UserMailResponse } from "./AnonAuth_pb.ts";

/**
 * 初回ユーザー登録
 *
 * @generated from rpc server.user.AnonAuthController.Register
 */
export const register = {
  localName: "register",
  name: "Register",
  kind: MethodKind.Unary,
  I: UserRegisterRequest,
  O: Empty,
  service: {
    typeName: "server.user.AnonAuthController"
  }
} as const;

/**
 * ユーザー登録後にメールアドレスの確認が完了し、パスワードを設定する
 *
 * @generated from rpc server.user.AnonAuthController.SignUp
 */
export const signUp = {
  localName: "signUp",
  name: "SignUp",
  kind: MethodKind.Unary,
  I: SignUpRequest,
  O: Empty,
  service: {
    typeName: "server.user.AnonAuthController"
  }
} as const;

/**
 * ログイン
 *
 * @generated from rpc server.user.AnonAuthController.SignIn
 */
export const signIn = {
  localName: "signIn",
  name: "SignIn",
  kind: MethodKind.Unary,
  I: UserAuthRequest,
  O: AnonTokenResponse,
  service: {
    typeName: "server.user.AnonAuthController"
  }
} as const;

/**
 * パスワードリセット用メール送信
 *
 * @generated from rpc server.user.AnonAuthController.ResetPasswordMail
 */
export const resetPasswordMail = {
  localName: "resetPasswordMail",
  name: "ResetPasswordMail",
  kind: MethodKind.Unary,
  I: UserMailRequest,
  O: Empty,
  service: {
    typeName: "server.user.AnonAuthController"
  }
} as const;

/**
 * パスワードリセット(メールリダイレクトからのトークンと共に設定)
 *
 * @generated from rpc server.user.AnonAuthController.SetNewPassword
 */
export const setNewPassword = {
  localName: "setNewPassword",
  name: "SetNewPassword",
  kind: MethodKind.Unary,
  I: SetNewPasswordRequest,
  O: Empty,
  service: {
    typeName: "server.user.AnonAuthController"
  }
} as const;

/**
 * トークンを元にユーザーメール取得（パスワード再設定の画面に使用）
 *
 * @generated from rpc server.user.AnonAuthController.GetUserMailByToken
 */
export const getUserMailByToken = {
  localName: "getUserMailByToken",
  name: "GetUserMailByToken",
  kind: MethodKind.Unary,
  I: TokenRequest,
  O: UserMailResponse,
  service: {
    typeName: "server.user.AnonAuthController"
  }
} as const;

/**
 * メールアドレスによる再招待
 *
 * @generated from rpc server.user.AnonAuthController.IsUnderRegister
 */
export const isUnderRegister = {
  localName: "isUnderRegister",
  name: "IsUnderRegister",
  kind: MethodKind.Unary,
  I: UserMailRequest,
  O: IsUnderRegisterResponse,
  service: {
    typeName: "server.user.AnonAuthController"
  }
} as const;

/**
 * 登録して途中離脱したユーザーの再招待
 *
 * @generated from rpc server.user.AnonAuthController.ResendInviteMail
 */
export const resendInviteMail = {
  localName: "resendInviteMail",
  name: "ResendInviteMail",
  kind: MethodKind.Unary,
  I: UserMailRequest,
  O: Empty,
  service: {
    typeName: "server.user.AnonAuthController"
  }
} as const;

/**
 * 登録して途中離脱したユーザーの削除
 *
 * @generated from rpc server.user.AnonAuthController.DeleteUnderRegisterUser
 */
export const deleteUnderRegisterUser = {
  localName: "deleteUnderRegisterUser",
  name: "DeleteUnderRegisterUser",
  kind: MethodKind.Unary,
  I: UserMailRequest,
  O: Empty,
  service: {
    typeName: "server.user.AnonAuthController"
  }
} as const;
