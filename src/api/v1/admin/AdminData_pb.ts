// @generated by protoc-gen-es v1.6.0 with parameter "target=ts,import_extension=.ts"
// @generated from file v1/admin/AdminData.proto (package server.admin, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Pager, PageResponse } from "../shared/Pager_pb.ts";

/**
 * @generated from message server.admin.AdminDataRequest
 */
export class AdminDataRequest extends Message<AdminDataRequest> {
  /**
   * @generated from field: string ID = 1;
   */
  ID = "";

  constructor(data?: PartialMessage<AdminDataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.admin.AdminDataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdminDataRequest {
    return new AdminDataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdminDataRequest {
    return new AdminDataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdminDataRequest {
    return new AdminDataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AdminDataRequest | PlainMessage<AdminDataRequest> | undefined, b: AdminDataRequest | PlainMessage<AdminDataRequest> | undefined): boolean {
    return proto3.util.equals(AdminDataRequest, a, b);
  }
}

/**
 * @generated from message server.admin.AdminUpdateDataRequest
 */
export class AdminUpdateDataRequest extends Message<AdminUpdateDataRequest> {
  /**
   * @generated from field: string ID = 1;
   */
  ID = "";

  /**
   * @generated from field: string Name = 2;
   */
  Name = "";

  /**
   * @generated from field: bool IsActive = 3;
   */
  IsActive = false;

  /**
   * @generated from field: string StoreID = 4;
   */
  StoreID = "";

  constructor(data?: PartialMessage<AdminUpdateDataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.admin.AdminUpdateDataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "IsActive", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "StoreID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdminUpdateDataRequest {
    return new AdminUpdateDataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdminUpdateDataRequest {
    return new AdminUpdateDataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdminUpdateDataRequest {
    return new AdminUpdateDataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AdminUpdateDataRequest | PlainMessage<AdminUpdateDataRequest> | undefined, b: AdminUpdateDataRequest | PlainMessage<AdminUpdateDataRequest> | undefined): boolean {
    return proto3.util.equals(AdminUpdateDataRequest, a, b);
  }
}

/**
 * @generated from message server.admin.AdminDataResponse
 */
export class AdminDataResponse extends Message<AdminDataResponse> {
  /**
   * @generated from field: string ID = 1;
   */
  ID = "";

  /**
   * @generated from field: string Name = 2;
   */
  Name = "";

  /**
   * ログイン可能
   *
   * @generated from field: bool IsActive = 3;
   */
  IsActive = false;

  /**
   * @generated from field: string Mail = 4;
   */
  Mail = "";

  /**
   * @generated from field: string StoreID = 5;
   */
  StoreID = "";

  /**
   * メール認証待ち
   *
   * @generated from field: bool IsConfirmed = 6;
   */
  IsConfirmed = false;

  constructor(data?: PartialMessage<AdminDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.admin.AdminDataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "IsActive", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "Mail", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "StoreID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "IsConfirmed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdminDataResponse {
    return new AdminDataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdminDataResponse {
    return new AdminDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdminDataResponse {
    return new AdminDataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AdminDataResponse | PlainMessage<AdminDataResponse> | undefined, b: AdminDataResponse | PlainMessage<AdminDataResponse> | undefined): boolean {
    return proto3.util.equals(AdminDataResponse, a, b);
  }
}

/**
 * @generated from message server.admin.AdminListRequest
 */
export class AdminListRequest extends Message<AdminListRequest> {
  constructor(data?: PartialMessage<AdminListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.admin.AdminListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdminListRequest {
    return new AdminListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdminListRequest {
    return new AdminListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdminListRequest {
    return new AdminListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AdminListRequest | PlainMessage<AdminListRequest> | undefined, b: AdminListRequest | PlainMessage<AdminListRequest> | undefined): boolean {
    return proto3.util.equals(AdminListRequest, a, b);
  }
}

/**
 * @generated from message server.admin.AdminListResponse
 */
export class AdminListResponse extends Message<AdminListResponse> {
  /**
   * @generated from field: repeated server.admin.AdminDataResponse Admins = 1;
   */
  Admins: AdminDataResponse[] = [];

  constructor(data?: PartialMessage<AdminListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.admin.AdminListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Admins", kind: "message", T: AdminDataResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdminListResponse {
    return new AdminListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdminListResponse {
    return new AdminListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdminListResponse {
    return new AdminListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AdminListResponse | PlainMessage<AdminListResponse> | undefined, b: AdminListResponse | PlainMessage<AdminListResponse> | undefined): boolean {
    return proto3.util.equals(AdminListResponse, a, b);
  }
}

/**
 * @generated from message server.admin.AdminLoginLog
 */
export class AdminLoginLog extends Message<AdminLoginLog> {
  /**
   * @generated from field: string UserID = 1;
   */
  UserID = "";

  /**
   * @generated from field: google.protobuf.Timestamp LoginAt = 2;
   */
  LoginAt?: Timestamp;

  /**
   * @generated from field: string IP = 3;
   */
  IP = "";

  /**
   * @generated from field: string UserAgent = 4;
   */
  UserAgent = "";

  constructor(data?: PartialMessage<AdminLoginLog>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.admin.AdminLoginLog";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UserID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "LoginAt", kind: "message", T: Timestamp },
    { no: 3, name: "IP", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "UserAgent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdminLoginLog {
    return new AdminLoginLog().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdminLoginLog {
    return new AdminLoginLog().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdminLoginLog {
    return new AdminLoginLog().fromJsonString(jsonString, options);
  }

  static equals(a: AdminLoginLog | PlainMessage<AdminLoginLog> | undefined, b: AdminLoginLog | PlainMessage<AdminLoginLog> | undefined): boolean {
    return proto3.util.equals(AdminLoginLog, a, b);
  }
}

/**
 * @generated from message server.admin.AdminLoginLogRequest
 */
export class AdminLoginLogRequest extends Message<AdminLoginLogRequest> {
  /**
   * @generated from field: string UserID = 1;
   */
  UserID = "";

  /**
   * @generated from field: server.shared.Pager Pager = 2;
   */
  Pager?: Pager;

  constructor(data?: PartialMessage<AdminLoginLogRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.admin.AdminLoginLogRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UserID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Pager", kind: "message", T: Pager },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdminLoginLogRequest {
    return new AdminLoginLogRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdminLoginLogRequest {
    return new AdminLoginLogRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdminLoginLogRequest {
    return new AdminLoginLogRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AdminLoginLogRequest | PlainMessage<AdminLoginLogRequest> | undefined, b: AdminLoginLogRequest | PlainMessage<AdminLoginLogRequest> | undefined): boolean {
    return proto3.util.equals(AdminLoginLogRequest, a, b);
  }
}

/**
 * @generated from message server.admin.AdminLoginLogListResponse
 */
export class AdminLoginLogListResponse extends Message<AdminLoginLogListResponse> {
  /**
   * @generated from field: repeated server.admin.AdminLoginLog LoginLogs = 1;
   */
  LoginLogs: AdminLoginLog[] = [];

  /**
   * @generated from field: server.shared.PageResponse PageResponse = 2;
   */
  PageResponse?: PageResponse;

  constructor(data?: PartialMessage<AdminLoginLogListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.admin.AdminLoginLogListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "LoginLogs", kind: "message", T: AdminLoginLog, repeated: true },
    { no: 2, name: "PageResponse", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdminLoginLogListResponse {
    return new AdminLoginLogListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdminLoginLogListResponse {
    return new AdminLoginLogListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdminLoginLogListResponse {
    return new AdminLoginLogListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AdminLoginLogListResponse | PlainMessage<AdminLoginLogListResponse> | undefined, b: AdminLoginLogListResponse | PlainMessage<AdminLoginLogListResponse> | undefined): boolean {
    return proto3.util.equals(AdminLoginLogListResponse, a, b);
  }
}

