// @generated by protoc-gen-es v1.6.0 with parameter "target=ts,import_extension=.ts"
// @generated from file v1/shared/Pager.proto (package server.shared, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message server.shared.Pager
 */
export class Pager extends Message<Pager> {
  /**
   * @generated from field: optional uint32 CurrentPage = 1;
   */
  CurrentPage?: number;

  /**
   * @generated from field: optional uint32 PerPage = 2;
   */
  PerPage?: number;

  constructor(data?: PartialMessage<Pager>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.shared.Pager";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "CurrentPage", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 2, name: "PerPage", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pager {
    return new Pager().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pager {
    return new Pager().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pager {
    return new Pager().fromJsonString(jsonString, options);
  }

  static equals(a: Pager | PlainMessage<Pager> | undefined, b: Pager | PlainMessage<Pager> | undefined): boolean {
    return proto3.util.equals(Pager, a, b);
  }
}

/**
 * @generated from message server.shared.PageResponse
 */
export class PageResponse extends Message<PageResponse> {
  /**
   * @generated from field: uint32 TotalCount = 1;
   */
  TotalCount = 0;

  /**
   * @generated from field: uint32 TotalPage = 2;
   */
  TotalPage = 0;

  /**
   * @generated from field: uint32 CurrentPage = 3;
   */
  CurrentPage = 0;

  /**
   * @generated from field: uint32 PerPage = 4;
   */
  PerPage = 0;

  constructor(data?: PartialMessage<PageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.shared.PageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "TotalCount", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "TotalPage", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "CurrentPage", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "PerPage", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PageResponse {
    return new PageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PageResponse {
    return new PageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PageResponse {
    return new PageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PageResponse | PlainMessage<PageResponse> | undefined, b: PageResponse | PlainMessage<PageResponse> | undefined): boolean {
    return proto3.util.equals(PageResponse, a, b);
  }
}

